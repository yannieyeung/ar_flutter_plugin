// CORRECTED Firebase Security Rules (NO CIRCULAR DEPENDENCIES)
// Apply these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own document
    match /users/{userId} {
      // Users can read and write their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Anyone authenticated can read basic profile info (for matching/listings)
      allow read: if request.auth != null && resource.data.keys().hasAny(['name', 'userType', 'profilePicture']);
    }
    
    // User Photos collection - for photo upload metadata
    match /user_photos/{photoId} {
      // Users can read their own photo metadata
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Users can create photo metadata for their own photos
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'photoType', 'fileName']) &&
        request.resource.data.userId is string &&
        request.resource.data.photoType is string &&
        request.resource.data.fileName is string;
      
      // Users can update their own photo metadata
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      
      // Users can delete their own photo metadata
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Job postings collection (new naming)
    match /job_postings/{jobId} {
      // Anyone authenticated can read job postings
      allow read: if request.auth != null;
      
      // Only job owners can create/update/delete their jobs
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.employerId;
      
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.employerId;
    }
    
    // Legacy jobs collection (for backward compatibility)
    match /jobs/{jobId} {
      // Anyone authenticated can read job postings
      allow read: if request.auth != null;
      
      // Only job owners can create/update/delete their jobs
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.employerId;
      
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.employerId;
    }
    
    // Applications collection
    match /applications/{applicationId} {
      // Applicants and employers involved can read applications
      allow read: if request.auth != null 
        && (request.auth.uid == resource.data.applicantId 
            || request.auth.uid == resource.data.employerId);
      
      // Applicants can create applications
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.applicantId;
      
      // Both parties can update application status
      allow update: if request.auth != null 
        && (request.auth.uid == resource.data.applicantId 
            || request.auth.uid == resource.data.employerId);
    }
    
    // Helpers collection (for helper profiles)
    match /helpers/{helperId} {
      // Anyone authenticated can read helper profiles (for matching)
      allow read: if request.auth != null;
      
      // Helpers can create/update their own profiles
      allow create, update: if request.auth != null 
        && request.auth.uid == helperId;
    }
  }
}