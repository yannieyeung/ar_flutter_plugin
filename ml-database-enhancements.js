// ML-Enhanced Database Schema Extensions
// Add these fields to your existing Jobs and Users collections

// ========================================
// 1. ENHANCED JOBS COLLECTION
// ========================================

const mlEnhancedJob = {
  // ... all existing fields from current design ...
  
  // NEW: ML-Optimized Fields
  mlFeatures: {
    // Convert string experience to numerical
    experienceRequiredYears: 2.0,  // Instead of "1-2 years"
    
    // Normalized salary (0-1 range based on market data)
    salaryNormalized: 0.65,  // 3500 HKD = 0.65 in 0-8000 range
    
    // Urgency as numerical score
    urgencyScore: 0.8,  // immediate=1.0, week=0.6, month=0.3, flexible=0.2
    
    // Skills with importance weights and minimum levels
    skillsRequired: {
      "cleaning": { importance: 0.9, minimumLevel: 3.0 },
      "cooking": { importance: 0.7, minimumLevel: 2.5 },
      "childcare": { importance: 0.8, minimumLevel: 4.0 }
    },
    
    // Enhanced location data for geo-matching
    locationPreferences: {
      districts: ["Central", "Admiralty"],
      maxTravelTime: 30,  // minutes
      coordinates: { lat: 22.2783, lng: 114.1747 },
      transportPreferences: ["mtr", "bus", "taxi"]
    },
    
    // Schedule as 7-day binary vector (Mon-Sun)
    scheduleVector: [1, 1, 1, 1, 1, 0, 0],
    
    // Pre-computed embeddings (generated by TensorFlow)
    jobEmbedding: [], // 128-dimensional vector, initially empty
    
    // Employer success metrics
    historicalSuccessRate: 0.75,
    averageTimeToFillDays: 14
  },
  
  // NEW: User Interaction Tracking
  interactions: {
    views: 0,
    applications: 0,
    shortlists: 0,
    hires: 0,
    
    // Track which users interacted (for collaborative filtering)
    viewedBy: [],     // ["helper_uid_1", "helper_uid_2"]
    appliedBy: [],    // ["helper_uid_3"]
    shortlistedBy: [], // ["helper_uid_4"]
    
    // Interaction timestamps for recency weighting
    recentViews: [],   // [{"userId": "helper_1", "timestamp": "2024-01-15T10:00:00Z"}]
    
    // Engagement metrics
    averageViewDurationSeconds: 0,
    clickThroughRate: 0
  },
  
  // NEW: Training Labels (filled after job completion)
  outcomes: {
    filled: false,
    hiredCandidateId: null,
    timeToHire: null,  // days
    employerSatisfactionScore: null,  // 1-5 rating
    helperRetentionDays: null,  // how long helper stayed
    rehireCandidate: false,  // would employer rehire this helper
    jobCompletionScore: null  // 1-5 rating of job completion quality
  }
};

// ========================================
// 2. ENHANCED USERS COLLECTION (HELPERS)
// ========================================

const mlEnhancedHelper = {
  // ... all existing fields from current design ...
  
  // NEW: ML-Optimized Helper Profile
  mlProfile: {
    // Skills with self-rating + employer feedback
    skillsRated: {
      "cleaning": { 
        selfRating: 4.0, 
        avgEmployerRating: 4.2, 
        confidence: 0.8,  // confidence in rating accuracy
        totalRatings: 15  // number of employer ratings received
      },
      "cooking": { 
        selfRating: 3.5, 
        avgEmployerRating: 3.8, 
        confidence: 0.7,
        totalRatings: 8
      }
    },
    
    // Numerical experience and performance metrics
    experienceYears: 3.5,
    successfulJobsCompleted: 12,
    averageJobDurationDays: 365,
    employerRatingAverage: 4.3,
    
    // Helper preferences for matching
    preferences: {
      salaryRange: { min: 3000, max: 5000, currency: "HKD" },
      maxTravelTime: 45,  // minutes
      preferredDistricts: ["Central", "Admiralty", "Wan Chai"],
      workingHours: { earliest: "07:00", latest: "19:00" },
      liveInPreference: 0.3,  // 0=never, 0.5=flexible, 1=only
      jobTypePreferences: {
        "domestic_helper": 0.9,
        "caregiver": 0.7,
        "driver": 0.2
      }
    },
    
    // Pre-computed embeddings
    helperEmbedding: [], // 128-dimensional vector
    
    // Behavioral patterns for ML
    applicationPattern: {
      averageJobsAppliedPerWeek: 2.5,
      averageResponseTimeHours: 4.2,
      mostActiveTimeOfDay: "morning",  // morning, afternoon, evening
      applicationSuccessRate: 0.25  // applications that lead to interviews
    }
  },
  
  // NEW: Job Interaction History
  jobInteractions: {
    viewed: [],      // ["job_id_1", "job_id_2"]
    applied: [],     // ["job_id_3"]
    interviewed: [], // ["job_id_4"]
    hired: [],       // ["job_id_5"]
    
    // Implicit preferences learned from behavior
    preferences: {
      prefersSalaryAbove: 3500,
      prefersLiveIn: false,
      mostActiveTimeOfDay: "morning",
      
      // Learned preferences from interaction patterns
      preferredEmployerTypes: ["individual", "family"],
      avoidedJobCharacteristics: ["night_shift", "heavy_lifting"]
    },
    
    // Interaction timestamps for recency analysis
    interactionHistory: [
      {
        jobId: "job_123",
        action: "view", // view, apply, interview, hire
        timestamp: "2024-01-15T10:00:00Z",
        outcome: "applied" // eventual outcome of this interaction
      }
    ]
  }
};

// ========================================
// 3. API ENHANCEMENTS FOR ML
// ========================================

// Enhanced Job Creation API (add to existing route.js)
const createJobWithMLFeatures = {
  // Standard job fields...
  
  // Auto-generate ML features
  mlFeatures: {
    experienceRequiredYears: parseExperience(jobData.requirements.experience),
    salaryNormalized: normalizeSalary(jobData.salary.amount),
    urgencyScore: mapUrgencyToScore(jobData.urgency),
    skillsRequired: enhanceSkillsWithWeights(jobData.requirements.skills),
    scheduleVector: convertScheduleToVector(jobData.requirements.workingDays),
    locationPreferences: enhanceLocationData(jobData.location)
  },
  
  interactions: {
    views: 0,
    applications: 0,
    viewedBy: [],
    appliedBy: [],
    recentViews: []
  },
  
  outcomes: {
    filled: false,
    hiredCandidateId: null,
    timeToHire: null
  }
};

// ========================================
// 4. INTERACTION TRACKING FUNCTIONS
// ========================================

// Track job view
async function trackJobView(jobId, userId) {
  const db = getFirestore();
  
  // Update job interactions
  await db.collection('jobs').doc(jobId).update({
    'interactions.views': FieldValue.increment(1),
    'interactions.viewedBy': FieldValue.arrayUnion(userId),
    'interactions.recentViews': FieldValue.arrayUnion({
      userId: userId,
      timestamp: new Date().toISOString()
    })
  });
  
  // Update user interactions
  await db.collection('users').doc(userId).update({
    'jobInteractions.viewed': FieldValue.arrayUnion(jobId),
    'jobInteractions.interactionHistory': FieldValue.arrayUnion({
      jobId: jobId,
      action: 'view',
      timestamp: new Date().toISOString()
    })
  });
}

// Track job application
async function trackJobApplication(jobId, userId) {
  const db = getFirestore();
  
  await db.collection('jobs').doc(jobId).update({
    'interactions.applications': FieldValue.increment(1),
    'interactions.appliedBy': FieldValue.arrayUnion(userId)
  });
  
  await db.collection('users').doc(userId).update({
    'jobInteractions.applied': FieldValue.arrayUnion(jobId),
    'jobInteractions.interactionHistory': FieldValue.arrayUnion({
      jobId: jobId,
      action: 'apply',
      timestamp: new Date().toISOString()
    })
  });
}

// ========================================
// 5. ML FEATURE GENERATION UTILITIES
// ========================================

function parseExperience(experienceString) {
  // Convert "1-2 years" to 1.5, "3+ years" to 3.5, etc.
  const match = experienceString.match(/(\d+)[-+]?(\d+)?/);
  if (match) {
    const min = parseInt(match[1]);
    const max = match[2] ? parseInt(match[2]) : min + 1;
    return (min + max) / 2;
  }
  return 1.0; // default
}

function normalizeSalary(amount, currency = 'HKD') {
  // Normalize to 0-1 range based on market data
  const salaryRanges = {
    'HKD': { min: 2000, max: 8000 },
    'USD': { min: 500, max: 2000 }
  };
  
  const range = salaryRanges[currency];
  return Math.min(Math.max((amount - range.min) / (range.max - range.min), 0), 1);
}

function mapUrgencyToScore(urgency) {
  const urgencyScores = {
    'immediate': 1.0,
    'within_week': 0.8,
    'within_month': 0.5,
    'flexible': 0.2
  };
  return urgencyScores[urgency] || 0.3;
}

function convertScheduleToVector(workingDays) {
  const dayMap = {
    'monday': 0, 'tuesday': 1, 'wednesday': 2, 'thursday': 3,
    'friday': 4, 'saturday': 5, 'sunday': 6
  };
  
  const vector = [0, 0, 0, 0, 0, 0, 0];
  workingDays.forEach(day => {
    if (dayMap[day] !== undefined) {
      vector[dayMap[day]] = 1;
    }
  });
  
  return vector;
}

// ========================================
// 6. MIGRATION SCRIPT EXAMPLE
// ========================================

async function migrateDatabaseForML() {
  const db = getFirestore();
  
  // Migrate existing jobs
  const jobsSnapshot = await db.collection('jobs').get();
  const batch = db.batch();
  
  jobsSnapshot.docs.forEach(doc => {
    const jobData = doc.data();
    
    const mlEnhancements = {
      mlFeatures: {
        experienceRequiredYears: parseExperience(jobData.requirements?.experience || "1 year"),
        salaryNormalized: normalizeSalary(jobData.salary?.amount || 3000),
        urgencyScore: mapUrgencyToScore(jobData.urgency || 'flexible'),
        jobEmbedding: [] // Will be populated by ML pipeline
      },
      interactions: {
        views: 0,
        applications: 0,
        viewedBy: [],
        appliedBy: []
      },
      outcomes: {
        filled: false,
        hiredCandidateId: null
      }
    };
    
    batch.update(doc.ref, mlEnhancements);
  });
  
  await batch.commit();
  console.log('Jobs migrated for ML compatibility');
}

export {
  mlEnhancedJob,
  mlEnhancedHelper,
  trackJobView,
  trackJobApplication,
  parseExperience,
  normalizeSalary,
  migrateDatabaseForML
};